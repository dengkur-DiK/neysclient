{"ast":null,"code":"import * as React from 'react';\nexport { Fragment, cloneElement, createContext, createElement, forwardRef, isValidElement, useContext, useMemo, useRef, useState } from 'react';\nexport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\n\n// React.useInsertionEffect is not available in React <18\n// This hack fixes a transpilation issue on some apps\nconst useBuiltinInsertionEffect = React[\"useInsertion\" + \"Effect\"];\n\n// Copied from:\n// https://github.com/facebook/react/blob/main/packages/shared/ExecutionEnvironment.js\nconst canUseDOM = !!(typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\");\n\n// Copied from:\n// https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.ts\n// \"React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\"\nconst useIsomorphicLayoutEffect = canUseDOM ? React.useLayoutEffect : React.useEffect;\n\n// useInsertionEffect is already a noop on the server.\n// See: https://github.com/facebook/react/blob/main/packages/react-server/src/ReactFizzHooks.js\nconst useInsertionEffect = useBuiltinInsertionEffect || useIsomorphicLayoutEffect;\n\n// Userland polyfill while we wait for the forthcoming\n// https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md\n// Note: \"A high-fidelity polyfill for useEvent is not possible because\n// there is no lifecycle or Hook in React that we can use to switch\n// .current at the right timing.\"\n// So we will have to make do with this \"close enough\" approach for now.\nconst useEvent = fn => {\n  const ref = React.useRef([fn, function () {\n    return ref[0](...arguments);\n  }]).current;\n  // Per Dan Abramov: useInsertionEffect executes marginally closer to the\n  // correct timing for ref synchronization than useLayoutEffect on React 18.\n  // See: https://github.com/facebook/react/pull/25881#issuecomment-1356244360\n  useInsertionEffect(() => {\n    ref[0] = fn;\n  });\n  return ref[1];\n};\nexport { useEvent, useInsertionEffect, useIsomorphicLayoutEffect };","map":{"version":3,"names":["React","Fragment","cloneElement","createContext","createElement","forwardRef","isValidElement","useContext","useMemo","useRef","useState","useSyncExternalStore","useBuiltinInsertionEffect","canUseDOM","window","document","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","useInsertionEffect","useEvent","fn","ref","arguments","current"],"sources":["/workspaces/neysclient/node_modules/wouter/esm/react-deps.js"],"sourcesContent":["import * as React from 'react';\nexport { Fragment, cloneElement, createContext, createElement, forwardRef, isValidElement, useContext, useMemo, useRef, useState } from 'react';\nexport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\n\n// React.useInsertionEffect is not available in React <18\n// This hack fixes a transpilation issue on some apps\nconst useBuiltinInsertionEffect = React[\"useInsertion\" + \"Effect\"];\n\n// Copied from:\n// https://github.com/facebook/react/blob/main/packages/shared/ExecutionEnvironment.js\nconst canUseDOM = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\n\n// Copied from:\n// https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.ts\n// \"React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\"\nconst useIsomorphicLayoutEffect = canUseDOM\n  ? React.useLayoutEffect\n  : React.useEffect;\n\n// useInsertionEffect is already a noop on the server.\n// See: https://github.com/facebook/react/blob/main/packages/react-server/src/ReactFizzHooks.js\nconst useInsertionEffect =\n  useBuiltinInsertionEffect || useIsomorphicLayoutEffect;\n\n// Userland polyfill while we wait for the forthcoming\n// https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md\n// Note: \"A high-fidelity polyfill for useEvent is not possible because\n// there is no lifecycle or Hook in React that we can use to switch\n// .current at the right timing.\"\n// So we will have to make do with this \"close enough\" approach for now.\nconst useEvent = (fn) => {\n  const ref = React.useRef([fn, (...args) => ref[0](...args)]).current;\n  // Per Dan Abramov: useInsertionEffect executes marginally closer to the\n  // correct timing for ref synchronization than useLayoutEffect on React 18.\n  // See: https://github.com/facebook/react/pull/25881#issuecomment-1356244360\n  useInsertionEffect(() => {\n    ref[0] = fn;\n  });\n  return ref[1];\n};\n\nexport { useEvent, useInsertionEffect, useIsomorphicLayoutEffect };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,YAAY,EAAEC,aAAa,EAAEC,aAAa,EAAEC,UAAU,EAAEC,cAAc,EAAEC,UAAU,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/I,SAASC,oBAAoB,QAAQ,uCAAuC;;AAE5E;AACA;AACA,MAAMC,yBAAyB,GAAGZ,KAAK,CAAC,cAAc,GAAG,QAAQ,CAAC;;AAElE;AACA;AACA,MAAMa,SAAS,GAAG,CAAC,EACjB,OAAOC,MAAM,KAAK,WAAW,IAC7B,OAAOA,MAAM,CAACC,QAAQ,KAAK,WAAW,IACtC,OAAOD,MAAM,CAACC,QAAQ,CAACX,aAAa,KAAK,WAAW,CACrD;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMY,yBAAyB,GAAGH,SAAS,GACvCb,KAAK,CAACiB,eAAe,GACrBjB,KAAK,CAACkB,SAAS;;AAEnB;AACA;AACA,MAAMC,kBAAkB,GACtBP,yBAAyB,IAAII,yBAAyB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,QAAQ,GAAIC,EAAE,IAAK;EACvB,MAAMC,GAAG,GAAGtB,KAAK,CAACS,MAAM,CAAC,CAACY,EAAE,EAAE;IAAA,OAAaC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAAC,SAAO,CAAC;EAAA,EAAC,CAAC,CAACC,OAAO;EACpE;EACA;EACA;EACAL,kBAAkB,CAAC,MAAM;IACvBG,GAAG,CAAC,CAAC,CAAC,GAAGD,EAAE;EACb,CAAC,CAAC;EACF,OAAOC,GAAG,CAAC,CAAC,CAAC;AACf,CAAC;AAED,SAASF,QAAQ,EAAED,kBAAkB,EAAEH,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}